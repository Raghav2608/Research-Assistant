import os
import uvicorn

from fastapi import FastAPI, HTTPException, Depends
from fastapi.staticfiles import StaticFiles
from dotenv import load_dotenv
from RAG_mqr import answer_with_rag # Import RAG pipeline function

from src.backend.pydantic_models import ResearchPaperQuery

load_dotenv()

if "OPENAI_API_KEY" not in os.environ:
    raise EnvironmentError("openai key not set in environment.")

app = FastAPI(
    title="Research Assistant API"
)
app.mount('/files', StaticFiles(directory=".", html=True), name="static")

# Root endpoint just to check if the API is running.
@app.get('/', summary="Root", description="Root endpoint.")
async def root():
    return {"message": "Hello from the RAG pipeline endpoint!"}

# Handles research queries.
@app.post('/rag_pipeline', summary="Submit a research query", description="Returns an answer generated by the RAG pipeline.")
async def ask_rag_pipeline(query_request:ResearchPaperQuery):
    try:
        answer = "Successfully called"
        # answer = answer_with_rag.invoke(query_request.message)
        return {"answer": answer}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    
if __name__ == "__main__":
    uvicorn.run("app_rag:app", host="localhost", port=8000, reload=True)
