import os
from fastapi import FastAPI, HTTPException, Depends
from pydantic import BaseModel
from dotenv import load_dotenv
import uvicorn

load_dotenv()

if "OPENAI_API_KEY" not in os.environ:
    raise EnvironmentError("openai key not set in environment.")

# Imports RAG pipeline function 
from RAG_mqr import answer_with_rag

app = FastAPI(
    title="Research Assistant API"
)

# request validation
class QueryRequest(BaseModel):
    query: str

# dependency injection to provide the answer_with_rag function.
def get_answer_with_rag():
    return answer_with_rag

# Handles research queries.
@app.post("/ask", summary="Submit a research query", description="Returns an answer generated by the RAG pipeline.")
async def ask(query_request: QueryRequest, rag_func=Depends(get_answer_with_rag)):
    try:
        answer = rag_func(query_request.query)
        return {"answer": answer}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# healthceck
@app.get("/health", summary="Health check", description="Returns the API health status.")
async def health():
    return {"status": "ok"}

if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)
